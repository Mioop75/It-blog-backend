// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

// User

model User {
  uuid          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  avatar        String?
  email         String
  name          String          @unique
  password      String
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  role_id       Int
  role          Role            @relation(fields: [role_id], references: [id], onDelete: NoAction)
  user_sessions User_Sessions[] @relation("user_session")
  articles      Article[]
}

model Role {
  id   Int        @id @default(autoincrement())
  name Role_Names
  user User[]
}

model User_Sessions {
  uuid      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sid       String   @unique
  user_uuid String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  user      User     @relation("user_session", fields: [user_uuid], references: [uuid], onDelete: Cascade)
}

enum Role_Names {
  Admin
  User
}

// Article
model Article {
  uuid        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  preview     String
  title       String   @unique
  description String
  slug        String   @unique
  content     String
  tags        Tag[]    @relation("TagToArticle")
  author      User     @relation(fields: [userUuid], references: [uuid])
  userUuid    String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("TagToArticle")
}
